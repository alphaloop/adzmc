from adzmc import utils
from mcpi import block

flatten = lambda l: [item for sublist in l for item in sublist]

WIDTH = 8
HEIGHT = 8
CHARSPACE = 1
_ = 0
X = 1
CHARACTER_MAP = {
  " ": flatten([
    [_,_,_,_,_,_,_,_],
    [_,_,_,_,_,_,_,_],
    [_,_,_,_,_,_,_,_],
    [_,_,_,_,_,_,_,_],
    [_,_,_,_,_,_,_,_],
    [_,_,_,_,_,_,_,_],
    [_,_,_,_,_,_,_,_],
    [_,_,_,_,_,_,_,_],
  ]),
  "A": flatten([
    [_,_,_,X,X,_,_,_],
    [_,_,X,_,_,X,_,_],
    [_,X,_,_,_,_,X,_],
    [_,X,_,_,_,_,X,_],
    [X,X,X,X,X,X,X,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X]
  ]),
  "B": flatten([
    [X,X,X,X,X,X,_,_],
    [X,_,_,_,_,_,X,_],
    [X,_,_,_,_,_,_,X],
    [X,X,X,X,X,X,X,_],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,X,_],
    [X,X,X,X,X,X,_,_],
  ]),
  "C": flatten([
    [_,_,X,X,X,X,X,X],
    [_,X,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [_,X,_,_,_,_,_,_],
    [_,_,X,X,X,X,X,X],
  ]),
  "D": flatten([
    [X,X,X,X,X,X,_,_],
    [X,_,_,_,_,_,X,_],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,X,_],
    [X,X,X,X,X,X,_,_],
  ]),
  "E": flatten([
    [X,X,X,X,X,X,X,X],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,X,X,X,X,X,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,X,X,X,X,X,X,X],
  ]),
  "F": flatten([
    [X,X,X,X,X,X,X,X],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,X,X,X,X,X,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
  ]),
  "G": flatten([
    [_,X,X,X,X,X,X,X],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,X,X,X,X],
    [X,_,_,_,_,_,_,X],
    [_,X,_,_,_,_,_,X],
    [_,_,X,X,X,X,X,X],
  ]),
  "H": flatten([
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,X,X,X,X,X,X,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
  ]),
  "I": flatten([
    [X,X,X,X,X,X,X,X],
    [_,_,_,X,_,_,_,_],
    [_,_,_,X,_,_,_,_],
    [_,_,_,X,_,_,_,_],
    [_,_,_,X,_,_,_,_],
    [_,_,_,X,_,_,_,_],
    [_,_,_,X,_,_,_,_],
    [X,X,X,X,X,X,X,X],
  ]),
  "J": flatten([
    [_,X,X,X,X,X,X,X],
    [_,_,_,_,_,_,_,X],
    [_,_,_,_,_,_,_,X],
    [_,_,_,_,_,_,_,X],
    [_,_,_,_,_,_,_,X],
    [_,_,_,_,_,_,_,X],
    [_,_,_,_,_,_,X,_],
    [_,X,X,X,X,X,_,_],
  ]),
  "K": flatten([
    [X,_,_,_,_,X,_,_],
    [X,_,_,_,X,_,_,_],
    [X,_,_,X,_,_,_,_],
    [X,_,X,_,_,_,_,_],
    [X,X,X,_,_,_,_,_],
    [X,_,_,X,_,_,_,_],
    [X,_,_,_,X,_,_,_],
    [X,_,_,_,_,X,_,_],
  ]),
  "L": flatten([
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,X,X,X,X,X,X,X],
  ]),
  "M": flatten([
    [X,_,_,_,_,_,_,X],
    [X,X,_,_,_,_,X,X],
    [X,_,X,_,_,X,_,X],
    [X,_,X,_,_,X,_,X],
    [X,_,_,X,X,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
  ]),
  "N": flatten([
    [X,_,_,_,_,_,_,X],
    [X,X,_,_,_,_,_,X],
    [X,_,X,_,_,_,_,X],
    [X,_,X,_,_,_,_,X],
    [X,_,_,X,X,_,_,X],
    [X,_,_,_,_,X,_,X],
    [X,_,_,_,_,X,_,X],
    [X,_,_,_,_,_,X,X],
  ]),
  "O": flatten([
    [_,_,X,X,X,X,_,_],
    [_,X,_,_,_,_,X,_],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [_,X,_,_,_,_,X,_],
    [_,_,X,X,X,X,_,_],
  ]),
  "P": flatten([
    [X,X,X,X,X,X,_,_],
    [X,_,_,_,_,_,X,_],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,X,_],
    [X,X,X,X,X,X,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
  ]),
  "Q": flatten([
    [_,_,X,X,X,X,_,_],
    [_,X,_,_,_,_,X,_],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,X,_,X],
    [_,X,_,_,_,_,X,_],
    [_,_,X,X,X,X,_,X],
  ]),
  "R": flatten([
    [X,X,X,X,X,X,_,_],
    [X,_,_,_,_,_,X,_],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,X,_],
    [X,X,X,X,X,X,_,_],
    [X,_,X,_,_,_,_,_],
    [X,_,_,X,X,_,_,_],
    [X,_,_,_,_,X,X,X],
  ]),
  "S": flatten([
    [_,_,X,X,X,X,X,X],
    [_,X,_,_,_,_,_,_],
    [X,_,_,_,_,_,_,_],
    [_,X,_,_,_,_,_,_],
    [_,_,X,X,X,X,X,_],
    [_,_,_,_,_,_,_,X],
    [_,_,_,_,_,_,X,_],
    [X,X,X,X,X,X,_,_],
  ]),
  "T": flatten([
    [X,X,X,X,X,X,X,X],
    [_,_,_,X,_,_,_,_],
    [_,_,_,X,_,_,_,_],
    [_,_,_,X,_,_,_,_],
    [_,_,_,X,_,_,_,_],
    [_,_,_,X,_,_,_,_],
    [_,_,_,X,_,_,_,_],
    [_,_,_,X,_,_,_,_],
  ]),
  "U": flatten([
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [_,X,_,_,_,_,X,_],
    [_,_,X,X,X,X,_,_],
  ]),
  "V": flatten([
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [_,X,_,_,_,_,X,_],
    [_,_,X,_,_,X,_,_],
    [_,_,_,X,X,_,_,_],
  ]),
  "W": flatten([
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,_,_,_,_,X],
    [X,_,_,X,X,_,_,X],
    [X,_,X,_,_,X,_,X],
    [X,_,X,_,_,X,_,X],
    [X,X,_,_,_,_,X,X],
    [X,_,_,_,_,_,_,X],
  ]),
  "X": flatten([
    [X,_,_,_,_,_,_,X],
    [_,X,_,_,_,_,X,_],
    [_,_,X,_,_,X,_,_],
    [_,_,_,X,X,_,_,_],
    [_,_,_,X,X,_,_,_],
    [_,_,X,_,_,X,_,_],
    [_,X,_,_,_,_,X,_],
    [X,_,_,_,_,_,_,X],
  ]),
  "Y": flatten([
    [X,_,_,_,_,_,X,_],
    [_,X,_,_,_,X,_,_],
    [_,_,X,_,X,_,_,_],
    [_,_,_,X,_,_,_,_],
    [_,_,_,X,_,_,_,_],
    [_,_,_,X,_,_,_,_],
    [_,_,_,X,_,_,_,_],
    [_,_,_,X,_,_,_,_],
  ]),
  "Z": flatten([
    [X,X,X,X,X,X,X,X],
    [_,_,_,_,_,_,X,_],
    [_,_,_,_,_,X,_,_],
    [_,_,_,_,X,_,_,_],
    [_,_,_,X,_,_,_,_],
    [_,_,X,_,_,_,_,_],
    [_,X,_,_,_,_,_,_],
    [X,X,X,X,X,X,X,X],
  ]),
}

class Text:
  
  def __init__(self, textBlock):
    blockMap = {
      0: block.AIR,
      1: textBlock
    }
    self.createCharacterMap(blockMap)

  def createCharacterMap(self, blockMap):
    self.characterMap = dict()
    for key in CHARACTER_MAP.keys():
      self.characterMap[key] = utils.MCImage(WIDTH, HEIGHT, CHARACTER_MAP[key], blockMap)
  
  def render(self, m, startBlock, text):
    text = text.upper()
    b = startBlock.copy()
    for character in text:
      charImage = self.characterMap[character]
      if charImage:
        charImage.renderTall(m, b)
        b.right(WIDTH + CHARSPACE)